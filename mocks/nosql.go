// Code generated by MockGen. DO NOT EDIT.
// Source: internal/store/nosql.go

// Package mock_store is a generated GoMock package.
package mocks

import (
	context "context"
	resources "packs-api/internal/resources"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNoSQLStore is a mock of NoSQLStore interface.
type MockNoSQLStore struct {
	ctrl     *gomock.Controller
	recorder *MockNoSQLStoreMockRecorder
}

// MockNoSQLStoreMockRecorder is the mock recorder for MockNoSQLStore.
type MockNoSQLStoreMockRecorder struct {
	mock *MockNoSQLStore
}

// NewMockNoSQLStore creates a new mock instance.
func NewMockNoSQLStore(ctrl *gomock.Controller) *MockNoSQLStore {
	mock := &MockNoSQLStore{ctrl: ctrl}
	mock.recorder = &MockNoSQLStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNoSQLStore) EXPECT() *MockNoSQLStoreMockRecorder {
	return m.recorder
}

// CheckHealth mocks base method.
func (m *MockNoSQLStore) CheckHealth(ctx context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckHealth", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckHealth indicates an expected call of CheckHealth.
func (mr *MockNoSQLStoreMockRecorder) CheckHealth(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckHealth", reflect.TypeOf((*MockNoSQLStore)(nil).CheckHealth), ctx)
}

// Close mocks base method.
func (m *MockNoSQLStore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockNoSQLStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockNoSQLStore)(nil).Close))
}

// CreateOrder mocks base method.
func (m *MockNoSQLStore) CreateOrder(ctx context.Context, order *resources.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockNoSQLStoreMockRecorder) CreateOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockNoSQLStore)(nil).CreateOrder), ctx, order)
}

// GetAllOrders mocks base method.
func (m *MockNoSQLStore) GetAllOrders(ctx context.Context) ([]*resources.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrders", ctx)
	ret0, _ := ret[0].([]*resources.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrders indicates an expected call of GetAllOrders.
func (mr *MockNoSQLStoreMockRecorder) GetAllOrders(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrders", reflect.TypeOf((*MockNoSQLStore)(nil).GetAllOrders), ctx)
}
